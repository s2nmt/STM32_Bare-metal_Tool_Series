
i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000300  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000430  08000438  00010438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000430  08000430  00010438  2**0
                  CONTENTS
  4 .ARM          00000000  08000430  08000430  00010438  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000430  08000438  00010438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000430  08000430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000438  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000438  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000277f  00000000  00000000  000104a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004ab  00000000  00000000  00012c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  000130d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000083  00000000  00000000  00013198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001063  00000000  00000000  0001321b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ab8  00000000  00000000  0001427e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000475a  00000000  00000000  00014d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001f4  00000000  00000000  00019490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00019684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000418 	.word	0x08000418

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000418 	.word	0x08000418

08000170 <GPIO_Mode>:
 * I assigh the 4 bit Mode to 0 to reset it and then assign new mode values using set command
 * register CRH for gpio 8 - 15
 * register CRL for gpio 0 - 8
 */
void GPIO_Mode(volatile GPIO_TypeDef* GPIO, uint8_t GPIO_PIN, GPIO_MODE Mode)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	70fb      	strb	r3, [r7, #3]
 800017c:	4613      	mov	r3, r2
 800017e:	70bb      	strb	r3, [r7, #2]
  unsigned int reset = ~0, set = 0 ;
 8000180:	f04f 33ff 	mov.w	r3, #4294967295
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	2300      	movs	r3, #0
 8000188:	60bb      	str	r3, [r7, #8]

  reset &= ~(((1 << 4) - 1) << ((GPIO_PIN % 8)*4));
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f003 0307 	and.w	r3, r3, #7
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	220f      	movs	r2, #15
 8000194:	fa02 f303 	lsl.w	r3, r2, r3
 8000198:	43db      	mvns	r3, r3
 800019a:	461a      	mov	r2, r3
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	4013      	ands	r3, r2
 80001a0:	60fb      	str	r3, [r7, #12]
  set   |= Mode <<  ((GPIO_PIN % 8)*4);
 80001a2:	78ba      	ldrb	r2, [r7, #2]
 80001a4:	78fb      	ldrb	r3, [r7, #3]
 80001a6:	f003 0307 	and.w	r3, r3, #7
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	fa02 f303 	lsl.w	r3, r2, r3
 80001b0:	461a      	mov	r2, r3
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	4313      	orrs	r3, r2
 80001b6:	60bb      	str	r3, [r7, #8]
  if(GPIO_PIN > 7){
 80001b8:	78fb      	ldrb	r3, [r7, #3]
 80001ba:	2b07      	cmp	r3, #7
 80001bc:	d90c      	bls.n	80001d8 <GPIO_Mode+0x68>
	  GPIO->CRH.REG &= reset;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	685a      	ldr	r2, [r3, #4]
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	401a      	ands	r2, r3
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	605a      	str	r2, [r3, #4]
	  GPIO->CRH.REG |= set;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	685a      	ldr	r2, [r3, #4]
 80001ce:	68bb      	ldr	r3, [r7, #8]
 80001d0:	431a      	orrs	r2, r3
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	605a      	str	r2, [r3, #4]
  }
  else{
	  GPIO->CRL.REG &= reset;
	  GPIO->CRL.REG |= set;
  }
}
 80001d6:	e00b      	b.n	80001f0 <GPIO_Mode+0x80>
	  GPIO->CRL.REG &= reset;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	401a      	ands	r2, r3
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	601a      	str	r2, [r3, #0]
	  GPIO->CRL.REG |= set;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	431a      	orrs	r2, r3
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	601a      	str	r2, [r3, #0]
}
 80001f0:	bf00      	nop
 80001f2:	3714      	adds	r7, #20
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
	...

080001fc <I2C1_Init>:
 ******************************************************************************
 */
#include <main.h>
#define SLAVE_ADDRESS  0x3C

void I2C1_Init(void){
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
	I2C1->I2C_CR1.REG |= (1 << 15);
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <I2C1_Init+0x50>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a11      	ldr	r2, [pc, #68]	; (800024c <I2C1_Init+0x50>)
 8000206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800020a:	6013      	str	r3, [r2, #0]
	I2C1->I2C_CR1.REG &= ~(1 << 15);
 800020c:	4b0f      	ldr	r3, [pc, #60]	; (800024c <I2C1_Init+0x50>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a0e      	ldr	r2, [pc, #56]	; (800024c <I2C1_Init+0x50>)
 8000212:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000216:	6013      	str	r3, [r2, #0]
	I2C1->I2C_OAR1.REG |= 1 << 14;
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <I2C1_Init+0x50>)
 800021a:	689b      	ldr	r3, [r3, #8]
 800021c:	4a0b      	ldr	r2, [pc, #44]	; (800024c <I2C1_Init+0x50>)
 800021e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000222:	6093      	str	r3, [r2, #8]
	I2C1->I2C_CR2.REG = 8;
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <I2C1_Init+0x50>)
 8000226:	2208      	movs	r2, #8
 8000228:	605a      	str	r2, [r3, #4]
	I2C1->I2C_CCR.REG = 40;
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <I2C1_Init+0x50>)
 800022c:	2228      	movs	r2, #40	; 0x28
 800022e:	61da      	str	r2, [r3, #28]
	I2C1->I2C_TRISE.REG = 9;
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <I2C1_Init+0x50>)
 8000232:	2209      	movs	r2, #9
 8000234:	621a      	str	r2, [r3, #32]
	I2C1->I2C_CR1.REG |= 1 ;
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <I2C1_Init+0x50>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a04      	ldr	r2, [pc, #16]	; (800024c <I2C1_Init+0x50>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6013      	str	r3, [r2, #0]
}
 8000242:	bf00      	nop
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40005400 	.word	0x40005400

08000250 <I2C1_Start>:
void I2C1_Start(void) {
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	I2C1->I2C_CR1.REG |= (1 << 10);
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <I2C1_Start+0x34>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <I2C1_Start+0x34>)
 800025a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800025e:	6013      	str	r3, [r2, #0]
	I2C1->I2C_CR1.REG |= (1 << 8);
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <I2C1_Start+0x34>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a07      	ldr	r2, [pc, #28]	; (8000284 <I2C1_Start+0x34>)
 8000266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800026a:	6013      	str	r3, [r2, #0]
    while (!(I2C1->I2C_SR1.REG & (1 << 0)));
 800026c:	bf00      	nop
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <I2C1_Start+0x34>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	f003 0301 	and.w	r3, r3, #1
 8000276:	2b00      	cmp	r3, #0
 8000278:	d0f9      	beq.n	800026e <I2C1_Start+0x1e>
    (void)I2C1->I2C_SR1.REG;
}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40005400 	.word	0x40005400

08000288 <I2C1_Write>:

void I2C1_Write(uint8_t data) {
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
    I2C1->I2C_DR.REG = data;                // Write data to the Data Register
 8000292:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <I2C1_Write+0x1c>)
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	6113      	str	r3, [r2, #16]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40005400 	.word	0x40005400

080002a8 <I2C1_Stop>:

void I2C1_Stop(void) {
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
	I2C1->I2C_CR1.REG |= (1 << 9);   // Generate STOP condition
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <I2C1_Stop+0x28>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <I2C1_Stop+0x28>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6013      	str	r3, [r2, #0]
    while (I2C1->I2C_CR1.REG & (1 << 9)); // Wait for STOP condition to clear
 80002b8:	bf00      	nop
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <I2C1_Stop+0x28>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d1f9      	bne.n	80002ba <I2C1_Stop+0x12>
}
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40005400 	.word	0x40005400

080002d4 <main>:

int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
	enable_RCC_APB1ENR(APB1_I2C1);
 80002da:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80002de:	f000 f83b 	bl	8000358 <enable_RCC_APB1ENR>
	enable_RCC_APB2ENR(APB2_PORT_B);
 80002e2:	2008      	movs	r0, #8
 80002e4:	f000 f826 	bl	8000334 <enable_RCC_APB2ENR>
	GPIO_Mode(GPIOB, 6, GPIO_MODE_AF_OUTPUT_OPEN_50MHz);
 80002e8:	220f      	movs	r2, #15
 80002ea:	2106      	movs	r1, #6
 80002ec:	480f      	ldr	r0, [pc, #60]	; (800032c <main+0x58>)
 80002ee:	f7ff ff3f 	bl	8000170 <GPIO_Mode>
	GPIO_Mode(GPIOB, 7, GPIO_MODE_AF_OUTPUT_OPEN_50MHz);
 80002f2:	220f      	movs	r2, #15
 80002f4:	2107      	movs	r1, #7
 80002f6:	480d      	ldr	r0, [pc, #52]	; (800032c <main+0x58>)
 80002f8:	f7ff ff3a 	bl	8000170 <GPIO_Mode>
	I2C1_Init();
 80002fc:	f7ff ff7e 	bl	80001fc <I2C1_Init>

    /* Loop forever */
	while(1){
	    I2C1_Start();
 8000300:	f7ff ffa6 	bl	8000250 <I2C1_Start>
	    I2C1_Write(SLAVE_ADDRESS << 1); // Send slave address with write bit (0)
 8000304:	2078      	movs	r0, #120	; 0x78
 8000306:	f7ff ffbf 	bl	8000288 <I2C1_Write>
	    I2C1_Write(0x00);              // Send data byte
 800030a:	2000      	movs	r0, #0
 800030c:	f7ff ffbc 	bl	8000288 <I2C1_Write>
	    I2C1_Stop();
 8000310:	f7ff ffca 	bl	80002a8 <I2C1_Stop>
	    for (volatile int i = 0; i < 500000; i++);
 8000314:	2300      	movs	r3, #0
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	e002      	b.n	8000320 <main+0x4c>
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	3301      	adds	r3, #1
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a03      	ldr	r2, [pc, #12]	; (8000330 <main+0x5c>)
 8000324:	4293      	cmp	r3, r2
 8000326:	ddf8      	ble.n	800031a <main+0x46>
	    I2C1_Start();
 8000328:	e7ea      	b.n	8000300 <main+0x2c>
 800032a:	bf00      	nop
 800032c:	40010c00 	.word	0x40010c00
 8000330:	0007a11f 	.word	0x0007a11f

08000334 <enable_RCC_APB2ENR>:


#include <rcc.h>


void enable_RCC_APB2ENR(unsigned long REG){
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	RCC->RCC_APB2ENR.REG |= REG;
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <enable_RCC_APB2ENR+0x20>)
 800033e:	699a      	ldr	r2, [r3, #24]
 8000340:	4904      	ldr	r1, [pc, #16]	; (8000354 <enable_RCC_APB2ENR+0x20>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4313      	orrs	r3, r2
 8000346:	618b      	str	r3, [r1, #24]
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000

08000358 <enable_RCC_APB1ENR>:

void enable_RCC_APB1ENR(unsigned long REG){
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	RCC->RCC_APB1ENR.REG |= REG;
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <enable_RCC_APB1ENR+0x20>)
 8000362:	69da      	ldr	r2, [r3, #28]
 8000364:	4904      	ldr	r1, [pc, #16]	; (8000378 <enable_RCC_APB1ENR+0x20>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4313      	orrs	r3, r2
 800036a:	61cb      	str	r3, [r1, #28]
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000

0800037c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000380:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000386:	490d      	ldr	r1, [pc, #52]	; (80003bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000388:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <LoopForever+0xe>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800039c:	4c0a      	ldr	r4, [pc, #40]	; (80003c8 <LoopForever+0x16>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003aa:	f000 f811 	bl	80003d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ae:	f7ff ff91 	bl	80002d4 <main>

080003b2 <LoopForever>:

LoopForever:
  b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   r0, =_estack
 80003b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c0:	08000438 	.word	0x08000438
  ldr r2, =_sbss
 80003c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c8:	2000001c 	.word	0x2000001c

080003cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC1_2_IRQHandler>
	...

080003d0 <__libc_init_array>:
 80003d0:	b570      	push	{r4, r5, r6, lr}
 80003d2:	2600      	movs	r6, #0
 80003d4:	4d0c      	ldr	r5, [pc, #48]	; (8000408 <__libc_init_array+0x38>)
 80003d6:	4c0d      	ldr	r4, [pc, #52]	; (800040c <__libc_init_array+0x3c>)
 80003d8:	1b64      	subs	r4, r4, r5
 80003da:	10a4      	asrs	r4, r4, #2
 80003dc:	42a6      	cmp	r6, r4
 80003de:	d109      	bne.n	80003f4 <__libc_init_array+0x24>
 80003e0:	f000 f81a 	bl	8000418 <_init>
 80003e4:	2600      	movs	r6, #0
 80003e6:	4d0a      	ldr	r5, [pc, #40]	; (8000410 <__libc_init_array+0x40>)
 80003e8:	4c0a      	ldr	r4, [pc, #40]	; (8000414 <__libc_init_array+0x44>)
 80003ea:	1b64      	subs	r4, r4, r5
 80003ec:	10a4      	asrs	r4, r4, #2
 80003ee:	42a6      	cmp	r6, r4
 80003f0:	d105      	bne.n	80003fe <__libc_init_array+0x2e>
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f8:	4798      	blx	r3
 80003fa:	3601      	adds	r6, #1
 80003fc:	e7ee      	b.n	80003dc <__libc_init_array+0xc>
 80003fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000402:	4798      	blx	r3
 8000404:	3601      	adds	r6, #1
 8000406:	e7f2      	b.n	80003ee <__libc_init_array+0x1e>
 8000408:	08000430 	.word	0x08000430
 800040c:	08000430 	.word	0x08000430
 8000410:	08000430 	.word	0x08000430
 8000414:	08000434 	.word	0x08000434

08000418 <_init>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr

08000424 <_fini>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr
