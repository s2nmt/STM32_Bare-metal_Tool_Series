
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000390  08000390  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000390  08000390  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000390  08000390  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000390  08000390  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000390  08000390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000010  080003a8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080003a8  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004b0b  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004f4  00000000  00000000  00024b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  00025080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000066  00000000  00000000  00025120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001077  00000000  00000000  00025186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a1f  00000000  00000000  000261fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004a9a  00000000  00000000  00026c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000140  00000000  00000000  0002b6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0002b7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08000378 	.word	0x08000378

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08000378 	.word	0x08000378

08000170 <GPIO_Mode>:
 * I assigh the 4 bit Mode to 0 to reset it and then assign new mode values using set command
 * register CRH for gpio 8 - 15
 * register CRL for gpio 0 - 8
 */
void GPIO_Mode(volatile GPIO_TypeDef* GPIO, uint8_t GPIO_PIN, GPIO_MODE Mode)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	70fb      	strb	r3, [r7, #3]
 800017c:	4613      	mov	r3, r2
 800017e:	70bb      	strb	r3, [r7, #2]
  unsigned int reset = ~0, set = 0 ;
 8000180:	f04f 33ff 	mov.w	r3, #4294967295
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	2300      	movs	r3, #0
 8000188:	60bb      	str	r3, [r7, #8]

  reset &= ~(((1 << 4) - 1) << ((GPIO_PIN % 8)*4));
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f003 0307 	and.w	r3, r3, #7
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	220f      	movs	r2, #15
 8000194:	fa02 f303 	lsl.w	r3, r2, r3
 8000198:	43db      	mvns	r3, r3
 800019a:	461a      	mov	r2, r3
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	4013      	ands	r3, r2
 80001a0:	60fb      	str	r3, [r7, #12]
  set   |= Mode <<  ((GPIO_PIN % 8)*4);
 80001a2:	78ba      	ldrb	r2, [r7, #2]
 80001a4:	78fb      	ldrb	r3, [r7, #3]
 80001a6:	f003 0307 	and.w	r3, r3, #7
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	fa02 f303 	lsl.w	r3, r2, r3
 80001b0:	461a      	mov	r2, r3
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	4313      	orrs	r3, r2
 80001b6:	60bb      	str	r3, [r7, #8]
  if(GPIO_PIN > 7){
 80001b8:	78fb      	ldrb	r3, [r7, #3]
 80001ba:	2b07      	cmp	r3, #7
 80001bc:	d90c      	bls.n	80001d8 <GPIO_Mode+0x68>
	  GPIO->CRH.REG &= reset;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	685a      	ldr	r2, [r3, #4]
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	401a      	ands	r2, r3
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	605a      	str	r2, [r3, #4]
	  GPIO->CRH.REG |= set;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	685a      	ldr	r2, [r3, #4]
 80001ce:	68bb      	ldr	r3, [r7, #8]
 80001d0:	431a      	orrs	r2, r3
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	605a      	str	r2, [r3, #4]
  }
  else{
	  GPIO->CRL.REG &= reset;
	  GPIO->CRL.REG |= set;
  }
}
 80001d6:	e00b      	b.n	80001f0 <GPIO_Mode+0x80>
	  GPIO->CRL.REG &= reset;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	401a      	ands	r2, r3
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	601a      	str	r2, [r3, #0]
	  GPIO->CRL.REG |= set;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	431a      	orrs	r2, r3
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	601a      	str	r2, [r3, #0]
}
 80001f0:	bf00      	nop
 80001f2:	3714      	adds	r7, #20
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
	...

080001fc <main>:
unsigned char data1[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
unsigned char data2[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};


int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0

	enable_RCC_APB2ENR(APB2_TIM1);
 8000200:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000204:	f000 f858 	bl	80002b8 <enable_RCC_APB2ENR>
	enable_RCC_APB2ENR(APB2_PORT_A);
 8000208:	2004      	movs	r0, #4
 800020a:	f000 f855 	bl	80002b8 <enable_RCC_APB2ENR>
	GPIO_Mode(GPIOA, 8, GPIO_MODE_AF_OUTPUT_PUSHPULL_50MHz);
 800020e:	220b      	movs	r2, #11
 8000210:	2108      	movs	r1, #8
 8000212:	4823      	ldr	r0, [pc, #140]	; (80002a0 <main+0xa4>)
 8000214:	f7ff ffac 	bl	8000170 <GPIO_Mode>

	TIM1->TIMx_CCMR1.REG |= 6 << 4 ;
 8000218:	4b22      	ldr	r3, [pc, #136]	; (80002a4 <main+0xa8>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a21      	ldr	r2, [pc, #132]	; (80002a4 <main+0xa8>)
 800021e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000222:	6193      	str	r3, [r2, #24]
	TIM1->TIMx_BDTR.REG |= 1 << 15 | 1 << 11;
 8000224:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <main+0xa8>)
 8000226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000228:	4a1e      	ldr	r2, [pc, #120]	; (80002a4 <main+0xa8>)
 800022a:	f443 4308 	orr.w	r3, r3, #34816	; 0x8800
 800022e:	6453      	str	r3, [r2, #68]	; 0x44

	TIM1->TIMx_CCER.REG |= 1;
 8000230:	4b1c      	ldr	r3, [pc, #112]	; (80002a4 <main+0xa8>)
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4a1b      	ldr	r2, [pc, #108]	; (80002a4 <main+0xa8>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6213      	str	r3, [r2, #32]
	TIM1->TIMx_CCR1.REG = 2000;
 800023c:	4b19      	ldr	r3, [pc, #100]	; (80002a4 <main+0xa8>)
 800023e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000242:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->TIMx_ARR.REG  = 7999;
 8000244:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <main+0xa8>)
 8000246:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800024a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->TIMx_EGR.REG = 1;
 800024c:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <main+0xa8>)
 800024e:	2201      	movs	r2, #1
 8000250:	615a      	str	r2, [r3, #20]

	TIM1->TIMx_DIER.REG |= 1 << 8;
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <main+0xa8>)
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	4a13      	ldr	r2, [pc, #76]	; (80002a4 <main+0xa8>)
 8000258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800025c:	60d3      	str	r3, [r2, #12]
	TIM1->TIMx_CR1.REG |= 1 << 7 | 1 << 2 | 1;
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <main+0xa8>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a10      	ldr	r2, [pc, #64]	; (80002a4 <main+0xa8>)
 8000264:	f043 0385 	orr.w	r3, r3, #133	; 0x85
 8000268:	6013      	str	r3, [r2, #0]

	RCC->RCC_AHBENR.REG |= 1;
 800026a:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <main+0xac>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <main+0xac>)
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	6153      	str	r3, [r2, #20]
	DMA->DMA_CMAR1.REG = (unsigned long) &TIM1->TIMx_CCR1.REG;
 8000276:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <main+0xb0>)
 8000278:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <main+0xb4>)
 800027a:	615a      	str	r2, [r3, #20]
	DMA->DMA_CPAR1.REG = (unsigned long) &data;
 800027c:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <main+0xb0>)
 800027e:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <main+0xb8>)
 8000280:	611a      	str	r2, [r3, #16]
	DMA->DMA_CNDTR1.REG |= 7;
 8000282:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <main+0xb0>)
 8000284:	68db      	ldr	r3, [r3, #12]
 8000286:	4a09      	ldr	r2, [pc, #36]	; (80002ac <main+0xb0>)
 8000288:	f043 0307 	orr.w	r3, r3, #7
 800028c:	60d3      	str	r3, [r2, #12]
	DMA->DMA_CCR1.REG |= 1 << 10 | 1 << 8 |  1 << 7 |1 << 5 |1 << 4 | 1;
 800028e:	4b07      	ldr	r3, [pc, #28]	; (80002ac <main+0xb0>)
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	4a06      	ldr	r2, [pc, #24]	; (80002ac <main+0xb0>)
 8000294:	f443 63b6 	orr.w	r3, r3, #1456	; 0x5b0
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	6093      	str	r3, [r2, #8]
//	DMA->DMA_CPAR1.REG = (unsigned long) &data1;
//	DMA->DMA_CNDTR1.REG = 10;
//	DMA->DMA_CCR1.REG = 1 << 14 | 1 << 7 | 1 << 6 | 1;

    /* Loop forever */
	while(1){
 800029e:	e7fe      	b.n	800029e <main+0xa2>
 80002a0:	40010800 	.word	0x40010800
 80002a4:	40012c00 	.word	0x40012c00
 80002a8:	40021000 	.word	0x40021000
 80002ac:	40020000 	.word	0x40020000
 80002b0:	40012c34 	.word	0x40012c34
 80002b4:	20000000 	.word	0x20000000

080002b8 <enable_RCC_APB2ENR>:


#include <rcc.h>


void enable_RCC_APB2ENR(APB2EN_REG_TypeDef REG){
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	80fb      	strh	r3, [r7, #6]
	RCC->RCC_APB2ENR.REG |= REG;
 80002c2:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <enable_RCC_APB2ENR+0x20>)
 80002c4:	699a      	ldr	r2, [r3, #24]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	4903      	ldr	r1, [pc, #12]	; (80002d8 <enable_RCC_APB2ENR+0x20>)
 80002ca:	4313      	orrs	r3, r2
 80002cc:	618b      	str	r3, [r1, #24]
}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	40021000 	.word	0x40021000

080002dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002dc:	480d      	ldr	r0, [pc, #52]	; (8000314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e4:	480c      	ldr	r0, [pc, #48]	; (8000318 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e8:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <LoopForever+0xe>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ec:	e002      	b.n	80002f4 <LoopCopyDataInit>

080002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f2:	3304      	adds	r3, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f8:	d3f9      	bcc.n	80002ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fa:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <LoopForever+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000300:	e001      	b.n	8000306 <LoopFillZerobss>

08000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000304:	3204      	adds	r2, #4

08000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000308:	d3fb      	bcc.n	8000302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030a:	f000 f811 	bl	8000330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030e:	f7ff ff75 	bl	80001fc <main>

08000312 <LoopForever>:

LoopForever:
  b LoopForever
 8000312:	e7fe      	b.n	8000312 <LoopForever>
  ldr   r0, =_estack
 8000314:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000320:	08000398 	.word	0x08000398
  ldr r2, =_sbss
 8000324:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000328:	2000002c 	.word	0x2000002c

0800032c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC1_2_IRQHandler>
	...

08000330 <__libc_init_array>:
 8000330:	b570      	push	{r4, r5, r6, lr}
 8000332:	2600      	movs	r6, #0
 8000334:	4d0c      	ldr	r5, [pc, #48]	; (8000368 <__libc_init_array+0x38>)
 8000336:	4c0d      	ldr	r4, [pc, #52]	; (800036c <__libc_init_array+0x3c>)
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	10a4      	asrs	r4, r4, #2
 800033c:	42a6      	cmp	r6, r4
 800033e:	d109      	bne.n	8000354 <__libc_init_array+0x24>
 8000340:	f000 f81a 	bl	8000378 <_init>
 8000344:	2600      	movs	r6, #0
 8000346:	4d0a      	ldr	r5, [pc, #40]	; (8000370 <__libc_init_array+0x40>)
 8000348:	4c0a      	ldr	r4, [pc, #40]	; (8000374 <__libc_init_array+0x44>)
 800034a:	1b64      	subs	r4, r4, r5
 800034c:	10a4      	asrs	r4, r4, #2
 800034e:	42a6      	cmp	r6, r4
 8000350:	d105      	bne.n	800035e <__libc_init_array+0x2e>
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f855 3b04 	ldr.w	r3, [r5], #4
 8000358:	4798      	blx	r3
 800035a:	3601      	adds	r6, #1
 800035c:	e7ee      	b.n	800033c <__libc_init_array+0xc>
 800035e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000362:	4798      	blx	r3
 8000364:	3601      	adds	r6, #1
 8000366:	e7f2      	b.n	800034e <__libc_init_array+0x1e>
 8000368:	08000390 	.word	0x08000390
 800036c:	08000390 	.word	0x08000390
 8000370:	08000390 	.word	0x08000390
 8000374:	08000394 	.word	0x08000394

08000378 <_init>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr

08000384 <_fini>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr
