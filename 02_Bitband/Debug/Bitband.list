
Bitband.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000348  08000350  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000348  08000348  00010350  2**0
                  CONTENTS
  4 .ARM          00000000  08000348  08000348  00010350  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000348  08000350  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800034c  0800034c  0001034c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000350  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000350  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010350  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010379  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000134b  00000000  00000000  000103bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000326  00000000  00000000  00011707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00011a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000058  00000000  00000000  00011ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000572  00000000  00000000  00011b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000009be  00000000  00000000  00012082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003fa2  00000000  00000000  00012a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000130  00000000  00000000  000169e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00016b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000330 	.word	0x08000330

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000330 	.word	0x08000330

08000170 <GPIO_Mode>:
 * I assigh the 4 bit Mode to 0 to reset it and then assign new mode values using set command
 * register CRH for gpio 8 - 15
 * register CRL for gpio 0 - 8
 */
void GPIO_Mode(volatile GPIO_TypeDef* GPIO, uint8_t GPIO_PIN, GPIO_MODE Mode)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	70fb      	strb	r3, [r7, #3]
 800017c:	4613      	mov	r3, r2
 800017e:	70bb      	strb	r3, [r7, #2]
  unsigned int reset = ~0, set = 0 ;
 8000180:	f04f 33ff 	mov.w	r3, #4294967295
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	2300      	movs	r3, #0
 8000188:	60bb      	str	r3, [r7, #8]

  reset &= ~(((1 << 4) - 1) << ((GPIO_PIN % 8)*4));
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f003 0307 	and.w	r3, r3, #7
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	220f      	movs	r2, #15
 8000194:	fa02 f303 	lsl.w	r3, r2, r3
 8000198:	43db      	mvns	r3, r3
 800019a:	461a      	mov	r2, r3
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	4013      	ands	r3, r2
 80001a0:	60fb      	str	r3, [r7, #12]
  set   |= Mode <<  ((GPIO_PIN % 8)*4);
 80001a2:	78ba      	ldrb	r2, [r7, #2]
 80001a4:	78fb      	ldrb	r3, [r7, #3]
 80001a6:	f003 0307 	and.w	r3, r3, #7
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	fa02 f303 	lsl.w	r3, r2, r3
 80001b0:	461a      	mov	r2, r3
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	4313      	orrs	r3, r2
 80001b6:	60bb      	str	r3, [r7, #8]
  if(GPIO_PIN > 7){
 80001b8:	78fb      	ldrb	r3, [r7, #3]
 80001ba:	2b07      	cmp	r3, #7
 80001bc:	d90c      	bls.n	80001d8 <GPIO_Mode+0x68>
	  GPIO->CRH.REG &= reset;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	685a      	ldr	r2, [r3, #4]
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	401a      	ands	r2, r3
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	605a      	str	r2, [r3, #4]
	  GPIO->CRH.REG |= set;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	685a      	ldr	r2, [r3, #4]
 80001ce:	68bb      	ldr	r3, [r7, #8]
 80001d0:	431a      	orrs	r2, r3
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	605a      	str	r2, [r3, #4]
  }
  else{
	  GPIO->CRL.REG &= reset;
	  GPIO->CRL.REG |= set;
  }
}
 80001d6:	e00b      	b.n	80001f0 <GPIO_Mode+0x80>
	  GPIO->CRL.REG &= reset;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	401a      	ands	r2, r3
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	601a      	str	r2, [r3, #0]
	  GPIO->CRL.REG |= set;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	431a      	orrs	r2, r3
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	601a      	str	r2, [r3, #0]
}
 80001f0:	bf00      	nop
 80001f2:	3714      	adds	r7, #20
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr

080001fa <GPIO_Toggle>:
	}
}
/*
 * I use the ODR register to detect the current state and then I toggle state
 */
void GPIO_Toggle(volatile GPIO_TypeDef* GPIO, uint8_t PIN){
 80001fa:	b480      	push	{r7}
 80001fc:	b083      	sub	sp, #12
 80001fe:	af00      	add	r7, sp, #0
 8000200:	6078      	str	r0, [r7, #4]
 8000202:	460b      	mov	r3, r1
 8000204:	70fb      	strb	r3, [r7, #3]

	GPIO->BSRR.REG = (1UL << (16*((GPIO->ODR.REG >> PIN) & 1) + PIN));
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	68da      	ldr	r2, [r3, #12]
 800020a:	78fb      	ldrb	r3, [r7, #3]
 800020c:	fa22 f303 	lsr.w	r3, r2, r3
 8000210:	f003 0301 	and.w	r3, r3, #1
 8000214:	011a      	lsls	r2, r3, #4
 8000216:	78fb      	ldrb	r3, [r7, #3]
 8000218:	4413      	add	r3, r2
 800021a:	2201      	movs	r2, #1
 800021c:	409a      	lsls	r2, r3
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	611a      	str	r2, [r3, #16]
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <delay_ms>:
 ******************************************************************************
 */

#include <main.h>
#define GPIOC_ODR_BB_ADDR 0x2200010C
void delay_ms(unsigned long ms) {
 800022c:	b480      	push	{r7}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
    for (unsigned long i = 0; i < ms*1000; i++) {
 8000234:	2300      	movs	r3, #0
 8000236:	60fb      	str	r3, [r7, #12]
 8000238:	e003      	b.n	8000242 <delay_ms+0x16>
        __asm("nop");
 800023a:	bf00      	nop
    for (unsigned long i = 0; i < ms*1000; i++) {
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	3301      	adds	r3, #1
 8000240:	60fb      	str	r3, [r7, #12]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000248:	fb02 f303 	mul.w	r3, r2, r3
 800024c:	68fa      	ldr	r2, [r7, #12]
 800024e:	429a      	cmp	r2, r3
 8000250:	d3f3      	bcc.n	800023a <delay_ms+0xe>
    }
}
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
	...

08000260 <main>:
int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
 	RCC_APB2ENR |= RCC_IOPCEN;
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <main+0x2c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a08      	ldr	r2, [pc, #32]	; (800028c <main+0x2c>)
 800026a:	f043 0310 	orr.w	r3, r3, #16
 800026e:	6013      	str	r3, [r2, #0]
 	GPIO_Mode(GPIOC, 13, GPIO_MODE_OUTPUT_OPEN_50MHz);
 8000270:	2207      	movs	r2, #7
 8000272:	210d      	movs	r1, #13
 8000274:	4806      	ldr	r0, [pc, #24]	; (8000290 <main+0x30>)
 8000276:	f7ff ff7b 	bl	8000170 <GPIO_Mode>

 	while(1){
 		GPIO_Toggle(GPIOC, 13);
 800027a:	210d      	movs	r1, #13
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <main+0x30>)
 800027e:	f7ff ffbc 	bl	80001fa <GPIO_Toggle>
		delay_ms(200);
 8000282:	20c8      	movs	r0, #200	; 0xc8
 8000284:	f7ff ffd2 	bl	800022c <delay_ms>
 		GPIO_Toggle(GPIOC, 13);
 8000288:	e7f7      	b.n	800027a <main+0x1a>
 800028a:	bf00      	nop
 800028c:	40021018 	.word	0x40021018
 8000290:	40011000 	.word	0x40011000

08000294 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000296:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000298:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800029e:	490d      	ldr	r1, [pc, #52]	; (80002d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <LoopForever+0xe>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a4:	e002      	b.n	80002ac <LoopCopyDataInit>

080002a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002aa:	3304      	adds	r3, #4

080002ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b0:	d3f9      	bcc.n	80002a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b4:	4c0a      	ldr	r4, [pc, #40]	; (80002e0 <LoopForever+0x16>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b8:	e001      	b.n	80002be <LoopFillZerobss>

080002ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002bc:	3204      	adds	r2, #4

080002be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c0:	d3fb      	bcc.n	80002ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c2:	f000 f811 	bl	80002e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c6:	f7ff ffcb 	bl	8000260 <main>

080002ca <LoopForever>:

LoopForever:
  b LoopForever
 80002ca:	e7fe      	b.n	80002ca <LoopForever>
  ldr   r0, =_estack
 80002cc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d8:	08000350 	.word	0x08000350
  ldr r2, =_sbss
 80002dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e0:	2000001c 	.word	0x2000001c

080002e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e4:	e7fe      	b.n	80002e4 <ADC1_2_IRQHandler>
	...

080002e8 <__libc_init_array>:
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	2600      	movs	r6, #0
 80002ec:	4d0c      	ldr	r5, [pc, #48]	; (8000320 <__libc_init_array+0x38>)
 80002ee:	4c0d      	ldr	r4, [pc, #52]	; (8000324 <__libc_init_array+0x3c>)
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	10a4      	asrs	r4, r4, #2
 80002f4:	42a6      	cmp	r6, r4
 80002f6:	d109      	bne.n	800030c <__libc_init_array+0x24>
 80002f8:	f000 f81a 	bl	8000330 <_init>
 80002fc:	2600      	movs	r6, #0
 80002fe:	4d0a      	ldr	r5, [pc, #40]	; (8000328 <__libc_init_array+0x40>)
 8000300:	4c0a      	ldr	r4, [pc, #40]	; (800032c <__libc_init_array+0x44>)
 8000302:	1b64      	subs	r4, r4, r5
 8000304:	10a4      	asrs	r4, r4, #2
 8000306:	42a6      	cmp	r6, r4
 8000308:	d105      	bne.n	8000316 <__libc_init_array+0x2e>
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000310:	4798      	blx	r3
 8000312:	3601      	adds	r6, #1
 8000314:	e7ee      	b.n	80002f4 <__libc_init_array+0xc>
 8000316:	f855 3b04 	ldr.w	r3, [r5], #4
 800031a:	4798      	blx	r3
 800031c:	3601      	adds	r6, #1
 800031e:	e7f2      	b.n	8000306 <__libc_init_array+0x1e>
 8000320:	08000348 	.word	0x08000348
 8000324:	08000348 	.word	0x08000348
 8000328:	08000348 	.word	0x08000348
 800032c:	0800034c 	.word	0x0800034c

08000330 <_init>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	bf00      	nop
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr

0800033c <_fini>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr
