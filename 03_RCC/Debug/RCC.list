
RCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c4  080003cc  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c4  080003c4  000103cc  2**0
                  CONTENTS
  4 .ARM          00000000  080003c4  080003c4  000103cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c4  080003cc  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003cc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002179  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000036d  00000000  00000000  000125b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00012920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000059  00000000  00000000  000129a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000102f  00000000  00000000  00012a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000009fc  00000000  00000000  00013a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000044a2  00000000  00000000  0001442c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000130  00000000  00000000  000188d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00018a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003ac 	.word	0x080003ac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003ac 	.word	0x080003ac

08000170 <GPIO_Mode>:
 * I assigh the 4 bit Mode to 0 to reset it and then assign new mode values using set command
 * register CRH for gpio 8 - 15
 * register CRL for gpio 0 - 8
 */
void GPIO_Mode(volatile GPIO_TypeDef* GPIO, uint8_t GPIO_PIN, GPIO_MODE Mode)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	70fb      	strb	r3, [r7, #3]
 800017c:	4613      	mov	r3, r2
 800017e:	70bb      	strb	r3, [r7, #2]
  unsigned int reset = ~0, set = 0 ;
 8000180:	f04f 33ff 	mov.w	r3, #4294967295
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	2300      	movs	r3, #0
 8000188:	60bb      	str	r3, [r7, #8]

  reset &= ~(((1 << 4) - 1) << ((GPIO_PIN % 8)*4));
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f003 0307 	and.w	r3, r3, #7
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	220f      	movs	r2, #15
 8000194:	fa02 f303 	lsl.w	r3, r2, r3
 8000198:	43db      	mvns	r3, r3
 800019a:	461a      	mov	r2, r3
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	4013      	ands	r3, r2
 80001a0:	60fb      	str	r3, [r7, #12]
  set   |= Mode <<  ((GPIO_PIN % 8)*4);
 80001a2:	78ba      	ldrb	r2, [r7, #2]
 80001a4:	78fb      	ldrb	r3, [r7, #3]
 80001a6:	f003 0307 	and.w	r3, r3, #7
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	fa02 f303 	lsl.w	r3, r2, r3
 80001b0:	461a      	mov	r2, r3
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	4313      	orrs	r3, r2
 80001b6:	60bb      	str	r3, [r7, #8]
  if(GPIO_PIN > 7){
 80001b8:	78fb      	ldrb	r3, [r7, #3]
 80001ba:	2b07      	cmp	r3, #7
 80001bc:	d90c      	bls.n	80001d8 <GPIO_Mode+0x68>
	  GPIO->CRH.REG &= reset;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	685a      	ldr	r2, [r3, #4]
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	401a      	ands	r2, r3
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	605a      	str	r2, [r3, #4]
	  GPIO->CRH.REG |= set;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	685a      	ldr	r2, [r3, #4]
 80001ce:	68bb      	ldr	r3, [r7, #8]
 80001d0:	431a      	orrs	r2, r3
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	605a      	str	r2, [r3, #4]
  }
  else{
	  GPIO->CRL.REG &= reset;
	  GPIO->CRL.REG |= set;
  }
}
 80001d6:	e00b      	b.n	80001f0 <GPIO_Mode+0x80>
	  GPIO->CRL.REG &= reset;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	401a      	ands	r2, r3
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	601a      	str	r2, [r3, #0]
	  GPIO->CRL.REG |= set;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	431a      	orrs	r2, r3
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	601a      	str	r2, [r3, #0]
}
 80001f0:	bf00      	nop
 80001f2:	3714      	adds	r7, #20
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr

080001fa <GPIO_Toggle>:
	}
}
/*
 * I use the ODR register to detect the current state and then I toggle state
 */
void GPIO_Toggle(volatile GPIO_TypeDef* GPIO, uint8_t PIN){
 80001fa:	b480      	push	{r7}
 80001fc:	b083      	sub	sp, #12
 80001fe:	af00      	add	r7, sp, #0
 8000200:	6078      	str	r0, [r7, #4]
 8000202:	460b      	mov	r3, r1
 8000204:	70fb      	strb	r3, [r7, #3]

	GPIO->BSRR.REG = (1UL << (16*((GPIO->ODR.REG >> PIN) & 1) + PIN));
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	68da      	ldr	r2, [r3, #12]
 800020a:	78fb      	ldrb	r3, [r7, #3]
 800020c:	fa22 f303 	lsr.w	r3, r2, r3
 8000210:	f003 0301 	and.w	r3, r3, #1
 8000214:	011a      	lsls	r2, r3, #4
 8000216:	78fb      	ldrb	r3, [r7, #3]
 8000218:	4413      	add	r3, r2
 800021a:	2201      	movs	r2, #1
 800021c:	409a      	lsls	r2, r3
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	611a      	str	r2, [r3, #16]
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <delay_ms>:
 ******************************************************************************
 */

#include <main.h>

void delay_ms(unsigned long ms) {
 800022c:	b480      	push	{r7}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]

    for (unsigned long i = 0; i < ms*1000; i++) {
 8000234:	2300      	movs	r3, #0
 8000236:	60fb      	str	r3, [r7, #12]
 8000238:	e003      	b.n	8000242 <delay_ms+0x16>
        __asm("nop");
 800023a:	bf00      	nop
    for (unsigned long i = 0; i < ms*1000; i++) {
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	3301      	adds	r3, #1
 8000240:	60fb      	str	r3, [r7, #12]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000248:	fb02 f303 	mul.w	r3, r2, r3
 800024c:	68fa      	ldr	r2, [r7, #12]
 800024e:	429a      	cmp	r2, r3
 8000250:	d3f3      	bcc.n	800023a <delay_ms+0xe>
    }
}
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
	...

08000260 <main>:
unsigned long test ;
int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0

	FLASH->FLASH_ACR.REG |= 2;
 8000264:	4b27      	ldr	r3, [pc, #156]	; (8000304 <main+0xa4>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a26      	ldr	r2, [pc, #152]	; (8000304 <main+0xa4>)
 800026a:	f043 0302 	orr.w	r3, r3, #2
 800026e:	6013      	str	r3, [r2, #0]

	RCC->RCC_CR.REG |= 1 << 16;
 8000270:	4b25      	ldr	r3, [pc, #148]	; (8000308 <main+0xa8>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a24      	ldr	r2, [pc, #144]	; (8000308 <main+0xa8>)
 8000276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800027a:	6013      	str	r3, [r2, #0]
	while(!RCC->RCC_CR.BITS.HSERDY);
 800027c:	bf00      	nop
 800027e:	4b22      	ldr	r3, [pc, #136]	; (8000308 <main+0xa8>)
 8000280:	789b      	ldrb	r3, [r3, #2]
 8000282:	f003 0302 	and.w	r3, r3, #2
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b00      	cmp	r3, #0
 800028a:	d0f8      	beq.n	800027e <main+0x1e>

	RCC->RCC_CFGR.REG |= 9 << 18;
 800028c:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <main+0xa8>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	4a1d      	ldr	r2, [pc, #116]	; (8000308 <main+0xa8>)
 8000292:	f443 1310 	orr.w	r3, r3, #2359296	; 0x240000
 8000296:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR.REG |= 1 << 16;
 8000298:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <main+0xa8>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	4a1a      	ldr	r2, [pc, #104]	; (8000308 <main+0xa8>)
 800029e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002a2:	6053      	str	r3, [r2, #4]

	RCC->RCC_CR.REG |= 1 << 24;
 80002a4:	4b18      	ldr	r3, [pc, #96]	; (8000308 <main+0xa8>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a17      	ldr	r2, [pc, #92]	; (8000308 <main+0xa8>)
 80002aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002ae:	6013      	str	r3, [r2, #0]
	while(!RCC->RCC_CR.BITS.PLL_RDY);
 80002b0:	bf00      	nop
 80002b2:	4b15      	ldr	r3, [pc, #84]	; (8000308 <main+0xa8>)
 80002b4:	78db      	ldrb	r3, [r3, #3]
 80002b6:	f003 0302 	and.w	r3, r3, #2
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d0f8      	beq.n	80002b2 <main+0x52>

	RCC->RCC_CFGR.BITS.SW = 2;
 80002c0:	4a11      	ldr	r2, [pc, #68]	; (8000308 <main+0xa8>)
 80002c2:	7913      	ldrb	r3, [r2, #4]
 80002c4:	2102      	movs	r1, #2
 80002c6:	f361 0301 	bfi	r3, r1, #0, #2
 80002ca:	7113      	strb	r3, [r2, #4]
	while(RCC->RCC_CFGR.BITS.SWS != 2);
 80002cc:	bf00      	nop
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <main+0xa8>)
 80002d0:	791b      	ldrb	r3, [r3, #4]
 80002d2:	f003 030c 	and.w	r3, r3, #12
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	2b08      	cmp	r3, #8
 80002da:	d1f8      	bne.n	80002ce <main+0x6e>


//	RCC->RCC_CFGR.REG = 4 << 24;
	RCC->RCC_APB2ENR.REG |= 1 << 4; // enable RCC GPIOC
 80002dc:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <main+0xa8>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a09      	ldr	r2, [pc, #36]	; (8000308 <main+0xa8>)
 80002e2:	f043 0310 	orr.w	r3, r3, #16
 80002e6:	6193      	str	r3, [r2, #24]
//	RCC->RCC_APB2ENR.REG |= 1 << 2; // enable RCC GPIOA
//	GPIO_Mode(GPIOA, 8, GPIO_MODE_AF_OUTPUT_PUSHPULL_50MHz);
	GPIO_Mode(GPIOC, 13, GPIO_MODE_OUTPUT_OPEN_50MHz);
 80002e8:	2207      	movs	r2, #7
 80002ea:	210d      	movs	r1, #13
 80002ec:	4807      	ldr	r0, [pc, #28]	; (800030c <main+0xac>)
 80002ee:	f7ff ff3f 	bl	8000170 <GPIO_Mode>

    /* Loop forever */
	while(1){
		GPIO_Toggle(GPIOC, 13);
 80002f2:	210d      	movs	r1, #13
 80002f4:	4805      	ldr	r0, [pc, #20]	; (800030c <main+0xac>)
 80002f6:	f7ff ff80 	bl	80001fa <GPIO_Toggle>
		delay_ms(1000);
 80002fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fe:	f7ff ff95 	bl	800022c <delay_ms>
		GPIO_Toggle(GPIOC, 13);
 8000302:	e7f6      	b.n	80002f2 <main+0x92>
 8000304:	40022000 	.word	0x40022000
 8000308:	40021000 	.word	0x40021000
 800030c:	40011000 	.word	0x40011000

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	; (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000314:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	; (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	; (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	; (800035c <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 f811 	bl	8000364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ff8d 	bl	8000260 <main>

08000346 <LoopForever>:

LoopForever:
  b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000354:	080003cc 	.word	0x080003cc
  ldr r2, =_sbss
 8000358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800035c:	2000001c 	.word	0x2000001c

08000360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC1_2_IRQHandler>
	...

08000364 <__libc_init_array>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	2600      	movs	r6, #0
 8000368:	4d0c      	ldr	r5, [pc, #48]	; (800039c <__libc_init_array+0x38>)
 800036a:	4c0d      	ldr	r4, [pc, #52]	; (80003a0 <__libc_init_array+0x3c>)
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	10a4      	asrs	r4, r4, #2
 8000370:	42a6      	cmp	r6, r4
 8000372:	d109      	bne.n	8000388 <__libc_init_array+0x24>
 8000374:	f000 f81a 	bl	80003ac <_init>
 8000378:	2600      	movs	r6, #0
 800037a:	4d0a      	ldr	r5, [pc, #40]	; (80003a4 <__libc_init_array+0x40>)
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <__libc_init_array+0x44>)
 800037e:	1b64      	subs	r4, r4, r5
 8000380:	10a4      	asrs	r4, r4, #2
 8000382:	42a6      	cmp	r6, r4
 8000384:	d105      	bne.n	8000392 <__libc_init_array+0x2e>
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f855 3b04 	ldr.w	r3, [r5], #4
 800038c:	4798      	blx	r3
 800038e:	3601      	adds	r6, #1
 8000390:	e7ee      	b.n	8000370 <__libc_init_array+0xc>
 8000392:	f855 3b04 	ldr.w	r3, [r5], #4
 8000396:	4798      	blx	r3
 8000398:	3601      	adds	r6, #1
 800039a:	e7f2      	b.n	8000382 <__libc_init_array+0x1e>
 800039c:	080003c4 	.word	0x080003c4
 80003a0:	080003c4 	.word	0x080003c4
 80003a4:	080003c4 	.word	0x080003c4
 80003a8:	080003c8 	.word	0x080003c8

080003ac <_init>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr

080003b8 <_fini>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr
